import { OpenAI } from 'openai';
import nodemailer from 'nodemailer';
import fetch from 'node-fetch';

const openai = new OpenAI({ apiKey: process.env.OPENAI_API_KEY });

export default async function handler(request, response) {
    if (request.method !== 'POST') {
        return response.status(405).json({ message: 'Method Not Allowed' });
    }

    const { address, email } = request.body;
    if (!address || !email) {
        return response.status(400).json({ message: 'Address and email are required' });
    }

    try {
        // 1. Получаем AI-данные (оставь свою логику, если хочешь)
        const prompt = `Act as a U.S. emergency preparedness analyst for the address "${address}". Generate a JSON object with these exact keys: "risk_level_text" (string), "risk_level_color" (string), "risks" (array), "action_steps" (array). Your response must be ONLY a valid JSON object.`;
        const aiCompletion = await openai.chat.completions.create({
            model: "gpt-4o",
            response_format: { type: "json_object" },
            messages: [{ role: "user", content: prompt }],
        });
        const reportData = JSON.parse(aiCompletion.choices[0].message.content);

        // 2. Генерируем HTML для PDF (можешь подредактировать под себя)
        const html = `
        <html>
        <head>
            <style>
                body { font-family: 'Segoe UI', Arial, sans-serif; padding: 32px; }
                h1 { color: #6d28d9; }
                .address { font-size: 18px; margin-bottom: 20px; }
                .risk { background: #f3f4f6; padding: 12px; border-radius: 6px; margin-bottom: 24px; }
                ul { margin-bottom: 16px; }
                .footer { color: #b0b0b0; font-size: 11px; margin-top: 40px;}
            </style>
        </head>
        <body>
            <h1>Evacuation Plan by Surwix</h1>
            <div class="address"><b>Address:</b> ${address}</div>
            <div class="risk"><b>Risk Level:</b> ${reportData.risk_level_text}</div>
            <h2>Risks</h2>
            <ul>
                ${reportData.risks.map(risk => `<li><b>${risk.type}:</b> ${risk.level_text} — ${risk.advice}</li>`).join('')}
            </ul>
            <h2>What to Do</h2>
            <ul>
                ${reportData.action_steps.map(step => `<li>${step}</li>`).join('')}
            </ul>
            <div class="footer">Report generated by AI for Surwix.com</div>
        </body>
        </html>
        `;

        // 3. Генерируем PDF через PDFShift
        const pdfRes = await fetch('https://api.pdfshift.io/v3/convert/pdf', {
            method: 'POST',
            headers: {
                'X-API-Key': process.env.PDFSHIFT_API_KEY,
                'Content-type': 'application/json'
            },
            body: JSON.stringify({ source: html })
        });

        if (!pdfRes.ok) {
            throw new Error('PDFShift error: ' + (await pdfRes.text()));
        }

        const pdfBuffer = await pdfRes.buffer();

        // 4. Отправляем PDF на почту
        const transporter = nodemailer.createTransport({
            service: 'gmail',
            auth: { user: process.env.EMAIL_SERVER_USER, pass: process.env.EMAIL_SERVER_PASSWORD },
        });
        await transporter.sendMail({
            from: `"Surwix Reports" <${process.env.EMAIL_SERVER_USER}>`,
            to: email,
            subject: `Your Personal Evacuation Plan from Surwix`,
            text: "Your AI-generated evacuation plan is attached.",
            attachments: [{
                filename: 'Surwix-Evacuation-Plan.pdf',
                content: pdfBuffer,
                contentType: 'application/pdf',
            }],
        });

        return response.status(200).json({ message: 'Success! Your report has been generated and sent to your email.' });

    } catch (error) {
        console.error('An error occurred:', error);
        return response.status(500).json({ message: 'A server error occurred. Please check the logs.' });
    }
}
