import fetch from 'node-fetch';
import nodemailer from 'nodemailer';

// Вспомогательная функция для создания HTML-кода для PDF
function createPdfHtml(address) {
    const reportDate = new Date().toLocaleDateString('en-US');
    return `
        <!DOCTYPE html>
        <html lang="en">
        <head>
            <meta charset="UTF-8">
            <title>Surwix Evacuation Plan</title>
            <style>
                body { font-family: sans-serif; color: #333; }
                .container { max-width: 800px; margin: auto; padding: 20px; }
                h1 { color: #003366; }
                p { font-size: 16px; }
            </style>
        </head>
        <body>
            <div class="container">
                <h1>Personal Evacuation Plan</h1>
                <p><strong>Address:</strong> ${address}</p>
                <p><strong>Report Date:</strong> ${reportDate}</p>
                <hr>
                <h2>Primary Advice</h2>
                <p>This is a placeholder report. In a real emergency, always follow the guidance from local authorities and official emergency services.</p>
            </div>
        </body>
        </html>
    `;
}

// Основная серверная функция
export default async function handler(request, response) {
    if (request.method !== 'POST') {
        return response.status(405).json({ message: 'Method Not Allowed' });
    }

    const { address, email } = request.body;
    if (!address || !email) {
        return response.status(400).json({ message: 'Address and email are required' });
    }

    try {
        // --- Шаг 1: Генерация PDF с помощью PDFshift ---
        console.log(`[1/2] Generating PDF with PDFshift for: ${address}`);
        const htmlToConvert = createPdfHtml(address);

        const pdfShiftResponse = await fetch('https://api.pdfshift.io/v3/convert/pdf', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                source: htmlToConvert,
                auth: process.env.PDFSHIFT_API_KEY, // Убедитесь, что ключ называется так в Vercel
            }),
        });
        
        if (!pdfShiftResponse.ok) {
            throw new Error(`PDFshift Error: ${await pdfShiftResponse.text()}`);
        }
        
        const pdfBuffer = await pdfShiftResponse.arrayBuffer();
        console.log('PDF generated by PDFshift.');

        // --- Шаг 2: Отправка письма с PDF-вложением ---
        console.log(`[2/2] Sending email to: ${email}...`);
        const transporter = nodemailer.createTransport({
            service: 'gmail',
            auth: { user: process.env.EMAIL_SERVER_USER, pass: process.env.EMAIL_SERVER_PASSWORD },
        });

        await transporter.sendMail({
            from: `"Surwix Reports" <${process.env.EMAIL_SERVER_USER}>`,
            to: email,
            subject: `Your Personal Evacuation Plan from Surwix for ${address}`,
            text: "Thank you for using Surwix. Your PDF report is attached.",
            attachments: [{
                filename: 'Surwix-Evacuation-Plan.pdf',
                content: Buffer.from(pdfBuffer),
                contentType: 'application/pdf',
            }],
        });
        console.log('Email sent.');

        return response.status(200).json({ message: 'Success! Your report has been generated and sent to your email.' });

    } catch (error) {
        console.error('An error occurred in the main handler:', error);
        return response.status(500).json({ message: 'A server error occurred. Please check the logs.' });
    }
}
