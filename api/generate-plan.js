import { OpenAI } from "openai";
import fetch from "node-fetch";
import nodemailer from "nodemailer";

function createPdfHtml(data) {
  // CSS из css.txt
  const style = `
.swx-report { font-family:'Inter',sans-serif;max-width:760px;margin:36px auto;background:#fff;padding:34px 32px 24px;border-radius:14px;box-shadow:0 8px 28px rgba(0,0,0,0.11);color:#222; }
.swx-header{border-bottom:2px solid #e2e8f0;padding-bottom:18px;margin-bottom:18px;}
.swx-header-title{display:flex;align-items:center;gap:10px;margin-bottom:5px;}
.swx-header-title h1{margin:0;font-size:28px;color:#003366;letter-spacing:1px;}
.swx-by{font-size:16px;color:#7281a0;}
.swx-logo{height:24px;}
.swx-meta{color:#7281a0;font-size:14px;}
.swx-meta span{margin-right:22px;}
.swx-summary{border-left:8px solid #ed8936;background:#f9f7f3;padding:13px 24px;margin-bottom:18px;font-size:19px;border-radius:9px;font-weight:500;}
.swx-summary .swx-maincomment{display:block;font-size:15px;color:#555;margin-top:5px;}
.swx-section{margin-bottom:26px;}
.swx-table{width:100%;border-collapse:collapse;margin-bottom:22px;}
.swx-table th,.swx-table td{border-bottom:1px solid #e2e8f0;padding:10px 8px;text-align:left;font-size:15px;}
.swx-table th{background:#f1f4f9;color:#1a365d;}
.swx-table .swx-risk-low{color:#38a169;font-weight:600;}
.swx-table .swx-risk-moderate{color:#ed8936;font-weight:600;}
.swx-table .swx-risk-high{color:#e53e3e;font-weight:600;}
.swx-section:has(.src-badge){background:#f5f8fa;border:1px solid #dae1e7;border-radius:8px;padding:20px;margin-bottom:30px;}
.swx-section:has(.src-badge) h2{font-size:20px;color:#1a202c;margin-bottom:12px;}
.src-badge{font-size:12px;padding:2px 6px;border-radius:4px;background:#eef4fa;border:1px solid #c4d9ec;color:#4682b4;margin-left:8px;}
.swx-section:has(.src-badge) > div, .swx-section:has(.src-badge) ul{font-size:14px;color:#2d3748;line-height:1.5;}
.swx-section:has(.src-badge) .source{display:block;font-size:12px;color:#9ea3ab;margin-top:8px;}
.section{margin:40px 0 32px;padding:24px;background:#f9fbfe;border-radius:10px;border:1px solid #e5ecf6;box-shadow:0 3px 8px rgba(30,72,145,0.05);}
.section h2{color:#003366;font-size:24px;margin-bottom:18px;display:flex;align-items:center;gap:10px;}
.resource-list, .checklist-list, .tips-list, .history-list{list-style:none;padding:0;margin:0;}
.resource-list li, .checklist-list li, .tips-list li, .history-list li{font-size:16px;margin-bottom:10px;display:flex;align-items:center;}
.resource-list .type{font-weight:bold;color:#005A9C;}
.resource-list .distance{margin-left:10px;color:#aaa;font-size:13px;}
.checklist-list li i{color:#39b77d;margin-right:10px;font-size:17px;}
.tips-list li i{color:#ffc107;margin-right:10px;font-size:17px;}
.swx-footer{border-top:1px solid #ececec;padding-top:13px;text-align:right;color:#7d90aa;font-size:12px;margin-top:20px;}
`;

  // HTML из html.txt с плейсхолдерами ${data.xxx}
  const html = `
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css"/>
<div class="swx-report">
  <div class="swx-header">
    <div class="swx-header-title">
      <h1>Personal Evacuation Report</h1>
      <span class="swx-by">by <img src="https://github.com/Surwix/surwix-app/blob/main/logo.png" alt="Logo" class="swx-logo"/></span>
    </div>
    <div class="swx-meta">
      <span><b>Address:</b> ${data.address}</span>
      <span><b>Date:</b> ${data.report_date}</span>
      <span><b>Report ID:</b> ${data.report_id}</span>
    </div>
  </div>

  <div class="swx-summary swx-risk-${data.risk_level_color}">
    <b>Overall Risk:</b> ${data.risk_level_text}
    <span class="swx-maincomment">${data.risk_comment}</span>
  </div>

  <div class="swx-section">
    <h2>Hazard Risk Matrix</h2>
    <table class="swx-table">
      <tr><th>Threat</th><th>Level</th><th>Advice</th><th>Probability</th></tr>
      ${data.risks.map(r=>`
      <tr>
        <td>${r.type}</td>
        <td class="swx-risk-${r.level_color}">${r.level_text}</td>
        <td>${r.advice}</td>
        <td>${r.probability}</td>
      </tr>`).join('')}
    </table>
  </div>

  <div class="swx-section">
    <h2>Flood Risk <span class="src-badge">FEMA</span></h2>
    <p><strong>Flood Zone:</strong> ${data.floodZone}</p>
    <p>${data.floodZoneDescription || ''}</p>
    <p class="source">Source: FEMA Flood Map Service Center</p>
  </div>

  <div class="swx-section">
    <h2>Recent Disasters <span class="src-badge">OpenFEMA</span></h2>
    <ul>
      ${data.disasters.map(d=>`<li>${d.incidentType}, ${d.declarationDate} (${d.designation})</li>`).join('')}
    </ul>
    <p class="source">Source: OpenFEMA.gov</p>
  </div>

  <div class="swx-section">
    <h2>Storm/Tornado Stats <span class="src-badge">NOAA</span></h2>
    <p>${data.stormStats}</p>
    <p class="source">Source: NOAA / National Weather Service</p>
  </div>

  <div class="swx-footer">
    Data for risk analysis provided by FEMA, OpenFEMA, and NOAA.<br/>
    This report is generated by Surwix AI using government and open data.<br/>
    Not a legal notice. Always follow instructions from local authorities.
  </div>
</div>`;

  return `<html><head><meta charset="UTF-8"/><style>${style}</style></head><body>${html}</body></html>`;
}

export default async function handler(req, res) {
  if (req.method !== "POST")
    return res.status(405).json({ message: "Only POST is allowed" });

  const { address, email, lat, lng, state } = req.body;
  if (!address || !email || lat == null || lng == null || !state)
    return res.status(400).json({ message: "Address, email, lat, lng and state are required" });

  try {
    // 1) OpenAI prompt
    const openai = new OpenAI({ apiKey: process.env.OPENAI_API_KEY });
    const aiRes = await openai.chat.completions.create({
      model: "gpt-4o",
      messages: [{
        role: "user",
        content: `
You are a US emergency preparedness analyst.
Given address "${address}" (lat ${lat}, lon ${lng}):
Return ONLY valid JSON:
{
  "risk_level_text": "...",
  "risk_level_color": "low|moderate|high",
  "risk_comment": "...",
  "risks": [
    { "type": "...", "level_text": "...", "level_color": "...", "advice": "...", "probability": "..." },
    ...
  ]
}`
      }],
      response_format: { type: "json_object" },
    });
    const data = JSON.parse(aiRes.choices[0].message.content);
    data.address     = address;
    data.report_date = new Date().toLocaleDateString("en-US");
    data.report_id   = `SRWX-${Date.now()}`;

    // 2) FEMA Flood Zone
    const femaResp = await fetch(
      `https://geo.fema.gov/fhm/rest/services/public/Hazards/CHAZ_Flood_Hazard_zones/MapServer/find?text=${lat},${lng}&layers=all:2&f=pjson`
    );
    const femaJson = await femaResp.json();
    data.floodZone = femaJson.results?.[0]?.attributes?.FEMA_ZONE || "Unknown";
    data.floodZoneDescription = "1% annual risk, not required by federal mortgage.";

    // 3) OpenFEMA Disasters (public endpoint)
    const ofResp = await fetch(
      `https://www.fema.gov/api/open/v2/DisasterDeclarationsSummaries?state=${state}&$top=2`
    );
    const ofJson = await ofResp.json();
    data.disasters = (ofJson.DisasterDeclarationsSummaries || []).map(d => ({
      incidentType: d.incidentType,
      declarationDate: d.declarationDate.split("T")[0],
      designation: d.designatedArea
    }));

    // 4) NOAA Storm Alerts
    const noaaResp = await fetch(`https://api.weather.gov/alerts/active?point=${lat},${lng}`, {
      headers: { "token": process.env.NOAA_API_KEY }
    });
    const noaaJson = await noaaResp.json();
    const count = noaaJson.features.filter(f => /tornado|storm/i.test(f.properties.event)).length;
    data.stormStats = `${count} active storm/tornado alerts`;

    // 5) Generate PDF
    const html = createPdfHtml(data);
    const pdfRes = await fetch("https://api.pdfshift.io/v3/convert/pdf", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        "X-API-Key": process.env.PDFSHIFT_API_KEY
      },
      body: JSON.stringify({ source: html })
    });
    if (!pdfRes.ok) throw new Error(await pdfRes.text());
    const pdfBuffer = await pdfRes.arrayBuffer();

    // 6) Send Email
    const transporter = nodemailer.createTransport({
      service: "gmail",
      auth: {
        user: process.env.EMAIL_SERVER_USER,
        pass: process.env.EMAIL_SERVER_PASSWORD
      }
    });
    await transporter.sendMail({
      from: `"Surwix Reports" <${process.env.EMAIL_SERVER_USER}>`,
      to: email,
      subject: `Your Evacuation Plan – ${address}`,
      text: "Your personalized evacuation plan is attached as PDF.",
      attachments: [{
        filename: "Evacuation-Plan.pdf",
        content: Buffer.from(pdfBuffer),
      }]
    });

    res.status(200).json({ message: "Success! Check your inbox." });
  } catch (err) {
    console.error(err);
    res.status(500).json({ message: err.message || "Server error" });
  }
}
